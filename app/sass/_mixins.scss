@mixin text ($font-size, $line-height, $font-weight) {
  font-size: $font-size;
  line-height: $line-height;
  font-weight: $font-weight;
}

//@mixin mobile {
//  @media (min-width: #{$width-mobile}) {
//    @content;
//  }
//}
//
//@mixin mobile-wide {
//  @media (min-width: #{$width-mobile-wide}) {
//    @content;
//  }
//}
//
//@mixin tablet {
//  @media (min-width: #{$width-tablet}) {
//    @content;
//  }
//}
//
//@mixin tablet-middle {
//  @media (min-width: #{$width-tablet-middle}) {
//    @content;
//  }
//}
//
//@mixin desktop-start {
//  @media (min-width: #{$width-desktop-start}) {
//    @content;
//  }
//}
//
//@mixin laptop {
//  @media (min-width: #{$width-laptop}) {
//    @content;
//  }
//}
//
//@mixin desktop-wide {
//  @media (min-width: #{$width-desktop-wide}) {
//    @content;
//  }
//}
//
//@mixin desktop-full {
//  @media (min-width: #{$width-desktop-full}) {
//    @content;
//  }
//}

//@mixin mobile {
//  @media (max-width: #{$mobile}) {
//    @content;
//  }
//}
//
//@mixin wide-mobile {
//  @media (max-width: #{$wide-mobile}) {
//    @content;
//  }
//}
//
//@mixin tablet {
//  @media (max-width: #{$tablet}) {
//    @content;
//  }
//}

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(../img/#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}